---
import { Image } from "astro:assets";
import { FcCalendar } from "react-icons/fc";
import { cn, formatPostTitle } from "@/lib/utils";

const {
  title,
  author: { node: author },
  featuredImage: { node: featuredImage },
  date,
  categories: { nodes: categories },
  slug,
} = Astro.props;

const mainCategories = categories
  .map(({ name, parent, slug }: any) => (parent ? { name: parent.node.name, slug } : { name, slug }))
  .filter((obj: any, index: any, self: any) => index === self.findIndex((t: any) => t.name === obj.name));

const DD_MM_YYYY = new Date(date).toLocaleDateString("fr-FR", {
  day: "2-digit",
  month: "2-digit",
  year: "numeric",
});
---

<post-card
  class="group/container overflow-hidden"
  style={{ perspective: "1200px" }}
>
  <a
    href={`/${slug}`}
    data-card
    class="flex h-full cursor-pointer flex-col rounded-sm bg-black"
  >
    <!-- 🖼️ Image -->
    <div class="h-[300px] overflow-hidden rounded-t-sm">
      <Image
        class="h-full w-full object-cover"
        title={featuredImage.title}
        src={featuredImage.sourceUrl}
        alt={featuredImage.altText}
        data-thumbnail
        width="500"
        height="300"
      />
    </div>

    <!-- 🗒️ Content -->
    <div class="flex grow flex-col gap-3 p-4">
      <!-- Title -->
      <h5 class="font-bakbak xs:text-3xl leading-none! text-primary text-pretty text-2xl uppercase">
        {formatPostTitle(title)}
      </h5>

      <!-- Categories -->
      <div class="mt-auto flex flex-wrap gap-1">
        {
          mainCategories.map((category: any) => (
            <span class={cn("bg-primary font-bakbak uppercase text-black", "px-2 pt-[1.5px] text-xs", "lg:text-sm")}>
              {category.name}
            </span>
          ))
        }
      </div>

      <!-- Author and date -->
      <div
        class={cn("font-open-sans items-center gap-1 text-white", "hidden text-xs", "xs:flex md:text-sm lg:text-base")}
      >
        {
          author ? (
            <>
              {author.avatar.url ? (
                <Image
                  title={author.name}
                  alt={author.name}
                  width="100"
                  height="100"
                  src={author.avatar.url}
                  class="mr-1 inline w-[15px] rounded-full"
                />
              ) : null}
              <span class="author">{author.name}</span>
              <span>|</span>
            </>
          ) : null
        }
        <FcCalendar />
        <date class="date">{DD_MM_YYYY}</date>
      </div>
    </div>

    <!-- ✨ Overlay -->
    <div
      data-overlay
      class="overlay absolute h-full w-full opacity-0"
    >
      <div
        class="absolute left-[-50%] top-[-50%] h-[200%] w-[200%] rounded-3xl bg-[radial-gradient(circle_at_50%,hsla(0,0%,100%,0.25),transparent_50%)]"
      >
      </div>
    </div>
  </a>
</post-card>

<!-- 🤖 Script -->
<script>
  class PostCard extends HTMLElement {
    constructor() {
      super();

      const postCardWrapper: HTMLElement | null = this.querySelector("[data-card]");
      const overlay: HTMLElement | null = this.querySelector("[data-overlay]");
      const image: HTMLElement | null = this.querySelector("[data-thumbnail]");

      function handleMouseEnter() {
        if (image) {
          image.style.transitionDuration = "500ms";
          image.style.transform = `scale(1.1)`;
        }
      }

      function handleMouseMove({ clientX, clientY }: { clientX: number; clientY: number }) {
        const rotationIntensity = 3;
        const overlayFactor = 2;
        if (postCardWrapper) {
          const { left, top, width, height } = postCardWrapper.getBoundingClientRect();
          const [x, y] = [clientX - left, clientY - top];
          postCardWrapper.style.transitionDuration = "0ms";
          postCardWrapper.style.transform = `rotateX(${-(y / (height / 2) - 1) * rotationIntensity}deg)
          rotateY(${(x / (width / 2) - 1) * rotationIntensity}deg)`;
          postCardWrapper.style.transitionDuration = "0ms";

          if (image) {
            image.style.transitionDuration = "0ms";
            image.style.transform = `scale(1.1)
            translateX(${((width - x) / width - 0.5) * 25}px)
            translateY(${((height - y) / height - 0.5) * 25}px)`;
          }

          if (overlay) {
            overlay.style.transitionDuration = "0ms";
            overlay.style.transform = `translate3d(${-((x * (100 / overlayFactor)) / width - 50 / overlayFactor)}%,
            ${-((y * (100 / overlayFactor)) / height - 50 / overlayFactor)}%,
            0)`;
            overlay.style.opacity = String(Math.abs(width / 2 - x) / width + Math.abs(height / 2 - y) / height);
          }
        }
      }

      function handleMouseOut() {
        if (postCardWrapper) {
          postCardWrapper.style.transitionDuration = "500ms";
          postCardWrapper.style.transform = `rotateX(0deg) rotateY(0deg)`;
        }

        if (image) {
          image.style.transitionDuration = "500ms";
          image.style.transform = `scale(1)
          translateX(0px)
          translateY(0px)`;
        }

        if (overlay) {
          overlay.style.transitionDuration = "500ms";
          overlay.style.opacity = "0";
          overlay.style.transform = `translate3d(0%, 0%, 0);`;
        }
      }

      if (document.body.clientWidth > 768 && postCardWrapper) {
        postCardWrapper.addEventListener("mouseenter", handleMouseEnter);
        postCardWrapper.addEventListener("mousemove", handleMouseMove);
        postCardWrapper.addEventListener("mouseout", handleMouseOut);
      }
    }
  }

  customElements.define("post-card", PostCard);
</script>
