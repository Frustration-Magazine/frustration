---
import { Image } from "astro:assets";
import { getAuthor } from "../../../libs/data-access/authors";
import { FcCalendar } from "react-icons/fc";
import { cn } from "@libs/tailwind";

const { title, authorName, excerpt, image, date, categories, slug } =
  Astro.props;

const author = await getAuthor(authorName);
let picture;
if (author) picture = author.data.picture;
---

<post-card
  class="group/container overflow-hidden"
  style={{ perspective: "1200px" }}>
  <a
    href={`/${slug}`}
    data-card
    class="flex h-full cursor-pointer flex-col bg-black">
    <!-- 🖼️ Image -->
    <div class="h-[300px] overflow-hidden">
      <Image
        class="w-full object-cover h-full"
        title={image.title}
        src={image.sourceUrl}
        alt={image.altText}
        data-thumbnail
        width="500"
        height="300"
      />
    </div>
    <!-- 🗒️ Content -->
    <div class="grow p-4">
      <header class="space-y-3">
        <!-- Title -->
        <h5
          class="text-pretty uppercase xl:w-[70%] font-bakbak text-2xl xs:text-3xl !leading-none text-yellow">
          {title}
        </h5>
        <!-- Categories -->
        <div class="flex flex-wrap gap-1">
          {
            categories.map((category: string) => (
              <span
                class={cn(
                  "bg-yellow text-black font-bakbak uppercase",
                  "px-2 pt-[1.5px] text-xs",
                  "lg:text-sm",
                )}>
                {category}
              </span>
            ))
          }
        </div>
        <!-- Author and date -->
        <div
          class="hidden text-xs md:text-sm lg:text-base xs:flex items-center gap-1 font-open-sans text-white">
          {
            picture ? (
              <Image
                title="Profile picture"
                alt="alt"
                width="100"
                height="100"
                src={picture}
                class="mr-1 inline w-[13px] rounded-full"
              />
            ) : null
          }
          <span class="author">{authorName}</span>
          <span>|</span>
          <FcCalendar />
          <date class="date">{date}</date>
        </div>
      </header>
    </div>

    <!-- ✨ Overlay -->
    <div
      data-overlay
      class="overlay absolute h-full w-full opacity-0">
      <div
        class="absolute left-[-50%] top-[-50%] h-[200%] w-[200%] rounded-3xl bg-[radial-gradient(circle_at_50%,hsla(0,0%,100%,0.25),transparent_50%)]">
      </div>
    </div>
  </a>
</post-card>
<!-- 🤖 Script -->
<script>
  class PostCard extends HTMLElement {
    constructor() {
      super();

      const postCardWrapper: HTMLElement | null =
        this.querySelector("[data-card]");
      const overlay: HTMLElement | null = this.querySelector("[data-overlay]");
      const image: HTMLElement | null = this.querySelector("[data-thumbnail]");

      function handleMouseEnter() {
        if (image) {
          image.style.transitionDuration = "500ms";
          image.style.transform = `scale(1.1)`;
        }
      }

      function handleMouseMove({
        clientX,
        clientY,
      }: {
        clientX: number;
        clientY: number;
      }) {
        const rotationIntensity = 3;
        const overlayFactor = 2;
        if (postCardWrapper) {
          const { left, top, width, height } =
            postCardWrapper.getBoundingClientRect();
          const [x, y] = [clientX - left, clientY - top];
          postCardWrapper.style.transitionDuration = "0ms";
          postCardWrapper.style.transform = `rotateX(${-(y / (height / 2) - 1) * rotationIntensity}deg)
          rotateY(${(x / (width / 2) - 1) * rotationIntensity}deg)`;
          postCardWrapper.style.transitionDuration = "0ms";

          if (image) {
            image.style.transitionDuration = "0ms";
            image.style.transform = `scale(1.1)
            translateX(${((width - x) / width - 0.5) * 25}px)
            translateY(${((height - y) / height - 0.5) * 25}px)`;
          }

          if (overlay) {
            overlay.style.transitionDuration = "0ms";
            overlay.style.transform = `translate3d(${-((x * (100 / overlayFactor)) / width - 50 / overlayFactor)}%,
            ${-((y * (100 / overlayFactor)) / height - 50 / overlayFactor)}%,
            0)`;
            overlay.style.opacity = String(
              Math.abs(width / 2 - x) / width +
                Math.abs(height / 2 - y) / height,
            );
          }
        }
      }

      function handleMouseOut() {
        if (postCardWrapper) {
          postCardWrapper.style.transitionDuration = "500ms";
          postCardWrapper.style.transform = `rotateX(0deg) rotateY(0deg)`;
        }

        if (image) {
          image.style.transitionDuration = "500ms";
          image.style.transform = `scale(1)
          translateX(0px)
          translateY(0px)`;
        }

        if (overlay) {
          overlay.style.transitionDuration = "500ms";
          overlay.style.opacity = "0";
          overlay.style.transform = `translate3d(0%, 0%, 0);`;
        }
      }

      if (document.body.clientWidth > 768) {
        postCardWrapper?.addEventListener("mouseenter", handleMouseEnter);
        postCardWrapper?.addEventListener("mousemove", handleMouseMove);
        postCardWrapper?.addEventListener("mouseout", handleMouseOut);
      }
    }
  }

  customElements.define("post-card", PostCard);
</script>
