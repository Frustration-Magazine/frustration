---
import { fetchYoutubeVideosFromPlaylist } from "@/libs/data-access/youtube";
import { getCollection } from "astro:content";

import { ChevronLeft, ChevronRight } from "lucide-react";

import Video from "./Video.astro";
import VideoInformations from "./VideoInformations.astro";

const allYoutubePlaylists = await getCollection("youtubePlaylists");
const allPlaylistIds = allYoutubePlaylists.map(({ data: { playlistId } }) => playlistId);
const promisesPlaylists = allPlaylistIds.map((playlistId) => fetchYoutubeVideosFromPlaylist({ playlistId }));
const playlistItems = (await Promise.all(promisesPlaylists)).flat();
const sortedPlaylistItems = playlistItems.sort(
  (firstItem, secondItem) => new Date(secondItem ? secondItem.snippet.publishedAt : "").getTime() - new Date(firstItem ? firstItem.snippet.publishedAt : "").getTime(),
);
---

<div class="main-home-videos-container">
  <!-- INFORMATIONS -->
  <div class="video-informations-container relative">
    <div class="absolute h-full w-full overflow-scroll text-white lg:block">
      {
        sortedPlaylistItems.map(({ snippet: { thumbnails, channelTitle, description, title: videoTitle, playlistId }, id: videoId }) => {
          const playlist = allYoutubePlaylists.find(({ data: { playlistId: currentPlaylistId } }) => currentPlaylistId === playlistId)?.data;
          return (
            <VideoInformations
              thumbnails={thumbnails}
              channelTitle={channelTitle}
              description={description}
              title={videoTitle}
              playlist={playlist}
              id={videoId}
            />
          );
        })
      }
    </div>
  </div>
  <!-- MAIN VIDEOS -->
  <div class="splide splide-videos shadow-[0_0_1rem_4px_rgba(0,0,0,0.5)]">
    <!-- MAIN VIDEOS ARROWS -->
    <div class="splide__arrows [&>button>svg]:lg:!h-[70px] [&>button>svg]:lg:!w-[30px] [&>button]:lg:!h-[80px] [&>button]:lg:!w-[80px]">
      <button class="splide__arrow splide__arrow--prev">
        <ChevronLeft
          color="#FFF200"
          className="!scale-125"
          size={60}
        />
      </button>
      <button class="splide__arrow splide__arrow--next">
        <ChevronRight
          color="#FFF200"
          className="!scale-125"
          size={60}
        />
      </button>
    </div>
    <!-- MAIN VIDEOS TRACK -->
    <div class="splide__track">
      <ul class="splide__list">
        {
          sortedPlaylistItems.map(
            ({
              id: playlistItemId,
              snippet: {
                resourceId: { videoId },
                thumbnails: {
                  maxres: { url: thumbnailUrl },
                },
              },
            }) => (
              <Video
                id={playlistItemId}
                videoId={videoId}
                thumbnailUrl={thumbnailUrl}
              />
            ),
          )
        }
      </ul>
    </div>
  </div>
  <!-- THUMBNAILS VIDEOS -->
  <div class="splide splide-videos-thumbnails">
    <div class="splide__track">
      <ul class="splide__list gap-2">
        {
          sortedPlaylistItems.map(
            ({
              id: playlistItemId,
              snippet: {
                resourceId: { videoId },
                thumbnails: {
                  maxres: { url: thumbnailUrl },
                },
              },
            }) => (
              <Video
                id={playlistItemId}
                videoId={videoId}
                thumbnailUrl={thumbnailUrl}
              />
            ),
          )
        }
      </ul>
    </div>
  </div>
</div>
<style is:global>
  .main-home-videos-container {
    display: grid;
    row-gap: 15px;
    column-gap: 0px;
    max-width: 1600px;
    grid-template-rows: auto auto;
    grid-template-columns: 1fr clamp(375px, 16vw, 450px);
    grid-template-areas:
      "videos videos"
      "thumbnails thumbnails";
  }

  @media (min-width: 1400px) {
    .main-home-videos-container {
      row-gap: 15px;
      column-gap: 15px;
      grid-template-areas:
        "videos informations"
        "thumbnails .";
    }
  }

  .main-home-videos-container .splide-videos {
    grid-area: videos;
  }
  .main-home-videos-container .splide-videos-thumbnails {
    grid-area: thumbnails;
  }
  .main-home-videos-container .video-informations-container {
    grid-area: informations;
    max-width: 375px;
  }

  .splide-videos .splide__video__play {
    height: 100px;
    width: 100px;
    opacity: 1;
    background: #fff200;
  }

  .splide-videos .splide__video__play::after {
    border-color: transparent transparent transparent black;
    border-width: 18px 0 18px 27px;
  }

  /* Arrow */

  .splide-videos .splide__arrow {
    background: #000;
    width: 3.5em;
    height: 3.5em;
    opacity: 1;
    transition: opacity 0.3s;
  }

  .splide-videos.is-playing .splide__arrow {
    opacity: 0;
  }

  .splide-videos.is-playing:hover .splide__arrow {
    opacity: 0.2;
  }

  .splide-videos.is-playing .splide__arrow:hover {
    opacity: 1;
  }
  .splide-videos .splide__pagination__page {
    background: black;
    opacity: 1;
    transition: opacity 0.3s;
  }
  .splide-videos.is-playing .splide__pagination__page {
    opacity: 0;
  }

  .splide-videos.is-playing:hover .splide__pagination__page {
    opacity: 1;
  }

  .splide-videos .splide__pagination__page.is-active {
    background: #fff200;
  }

  .splide-videos-thumbnails .splide__track--nav .splide__list > .splide__slide {
    border: none !important;
    cursor: pointer;
    transition: opacity 0.3s;
  }

  .splide-videos-thumbnails .splide__track--nav .splide__list > .splide__slide:not(.is-active) {
    opacity: 0.5;
  }
</style>
<script>
  import "./slider";
</script>
