---
import { readRecords } from "@/data-access/prisma";
import { fetchYoutube, getYoutubeResourceId } from "@/data-access/youtube";

import { ChevronLeft, ChevronRight } from "lucide-react";

import Video from "./Video.astro";
import VideoInformations from "./VideoInformations.astro";

const { data: records } = await readRecords({ table: "video", where: {}, success: "Videos read" });
const availableTypes = records.reduce((acc: string[], { type }: { type: string }) => (acc.includes(type) ? acc : [...acc, type]), []);

let resources: any[] = [];

const promises = availableTypes.map(async (type: string) => {
  const idsToFetch = records.filter(({ type: currentType }: { type: string }) => currentType === type).map(({ id }: { id: string }) => id);
  const concatenatedIds = idsToFetch.join(",");

  // 🔁 📺 Fetch
  let results: any[] = [];
  results = await fetchYoutube({ params: { id: concatenatedIds }, type });
  if (results) {
    results = results.map((result) => ({ ...result, id: getYoutubeResourceId(result) }));

    // Type 1 | Videos
    if (type === "video") {
      let videos = results.map((video: any) => ({ ...video }));
      resources = [...resources, ...videos];
    }

    // Type 2 | Channel
    if (type === "channel") {
      const channelIds = (results as any).map(({ id }) => id);
      const channelPromises = channelIds.map(async (channelId: string) => {
        let videosFromChannel = await fetchYoutube({ params: { type: "video", channelId, order: "date", maxResults: 10 } });

        if (videosFromChannel) {
          videosFromChannel = videosFromChannel.map((video: any) => ({ ...video, id: getYoutubeResourceId(video) }));

          const idsToFetch = videosFromChannel.map(({ id }: { id: string }) => id);
          const concatenatedIds = idsToFetch.join(",");
          let videos = await fetchYoutube({ params: { id: concatenatedIds }, type: "video" });

          resources = [...resources, ...videos];
        }
      });
      await Promise.all(channelPromises);
    }

    // Type 3 | Playlist
    if (type === "playlist") {
      const playlistIds = (results as any).map(({ id }) => id);
      const playlistPromises = playlistIds.map(async (playlistId: string) => {
        const playlistTitle = results.find(({ id }) => id === playlistId)?.snippet.title;
        let videosFromPlaylist = await fetchYoutube({ params: { playlistId }, type: "playlistItem" });

        if (videosFromPlaylist) {
          videosFromPlaylist = videosFromPlaylist.map((video: any) => ({ ...video, id: video.snippet.resourceId.videoId, snippet: { ...video.snippet, playlistTitle } }));
          resources = [...resources, ...videosFromPlaylist];
        }
      });
      await Promise.all(playlistPromises);
    }
  }
});

await Promise.all(promises);
resources.sort((firstItem, secondItem) => new Date(secondItem ? secondItem.snippet.publishedAt : "").getTime() - new Date(firstItem ? firstItem.snippet.publishedAt : "").getTime());
function getBestThumbnailUrl(thumbnails: any) {
  if (thumbnails.maxres) return thumbnails.maxres.url;
  if (thumbnails.standard) return thumbnails.standard.url;
  if (thumbnails.high) return thumbnails.high.url;
  if (thumbnails.medium) return thumbnails.medium.url;
  if (thumbnails.default) return thumbnails.default.url;
  return "";
}
---

<div class="main-home-videos-container">
  <!-- INFORMATIONS -->
  <div class="video-informations-container relative">
    <div class="absolute h-full w-full overflow-scroll text-white lg:block">
      {
        resources.map((resource) => {
          return (
            <VideoInformations
              thumbnailUrl={getBestThumbnailUrl(resource.snippet.thumbnails)}
              channelTitle={resource.snippet.channelTitle}
              channelUrl={`https://www.youtube.com/channel/${resource.snippet.channelId}`}
              description={resource.snippet.description}
              title={resource.snippet.title}
              playlistTitle={resource.snippet?.playlistTitle}
              playlistUrl={`https://www.youtube.com/playlist?list=${resource.snippet.playlistId}`}
              id={"video id"}
            />
          );
        })
      }
    </div>
  </div>
  <!-- MAIN VIDEOS -->
  <div class="splide splide-videos shadow-[0_0_1rem_4px_rgba(0,0,0,0.5)]">
    <!-- MAIN VIDEOS ARROWS -->
    <div class="splide__arrows [&>button>svg]:lg:!h-[70px] [&>button>svg]:lg:!w-[30px] [&>button]:lg:!h-[80px] [&>button]:lg:!w-[80px]">
      <button class="splide__arrow splide__arrow--prev">
        <ChevronLeft
          color="#FFF200"
          className="!scale-125"
          size={60}
        />
      </button>
      <button class="splide__arrow splide__arrow--next">
        <ChevronRight
          color="#FFF200"
          className="!scale-125"
          size={60}
        />
      </button>
    </div>
    <!-- MAIN VIDEOS TRACK -->
    <div class="splide__track">
      <ul class="splide__list">
        {
          resources.map((resource) => (
            <Video
              id={resource.id}
              thumbnailUrl={`https://i.ytimg.com/vi/${resource.id}/hq720.jpg`}
            />
          ))
        }
      </ul>
    </div>
  </div>
  <!-- THUMBNAILS VIDEOS -->
  <div class="splide splide-videos-thumbnails">
    <div class="splide__track">
      <ul class="splide__list gap-2">
        {
          resources.map((resource) => (
            <Video
              id={resource.id}
              thumbnailUrl={getBestThumbnailUrl(resource.snippet.thumbnails)}
            />
          ))
        }
      </ul>
    </div>
  </div>
</div>
<style is:global>
  .main-home-videos-container {
    display: grid;
    row-gap: 15px;
    column-gap: 0px;
    max-width: 1600px;
    grid-template-rows: auto auto;
    grid-template-columns: 1fr clamp(375px, 16vw, 450px);
    grid-template-areas:
      "videos videos"
      "thumbnails thumbnails";
  }

  @media (min-width: 1400px) {
    .main-home-videos-container {
      row-gap: 15px;
      column-gap: 15px;
      grid-template-areas:
        "videos informations"
        "thumbnails .";
    }
  }

  .main-home-videos-container .splide-videos {
    grid-area: videos;
  }
  .main-home-videos-container .splide-videos-thumbnails {
    grid-area: thumbnails;
  }
  .main-home-videos-container .video-informations-container {
    grid-area: informations;
    max-width: 375px;
  }

  .splide-videos .splide__video__play {
    height: 100px;
    width: 100px;
    opacity: 1;
    background: #fff200;
  }

  .splide-videos .splide__video__play::after {
    border-color: transparent transparent transparent black;
    border-width: 18px 0 18px 27px;
  }

  /* Arrow */

  .splide-videos .splide__arrow {
    background: #000;
    width: 3.5em;
    height: 3.5em;
    opacity: 1;
    transition: opacity 0.3s;
  }

  .splide-videos.is-playing .splide__arrow {
    opacity: 0;
  }

  .splide-videos.is-playing:hover .splide__arrow {
    opacity: 0.2;
  }

  .splide-videos.is-playing .splide__arrow:hover {
    opacity: 1;
  }
  .splide-videos .splide__pagination__page {
    background: black;
    opacity: 1;
    transition: opacity 0.3s;
  }
  .splide-videos.is-playing .splide__pagination__page {
    opacity: 0;
  }

  .splide-videos.is-playing:hover .splide__pagination__page {
    opacity: 1;
  }

  .splide-videos .splide__pagination__page.is-active {
    background: #fff200;
  }

  .splide-videos-thumbnails .splide__track--nav .splide__list > .splide__slide {
    border: none !important;
    cursor: pointer;
    transition: opacity 0.3s;
  }

  .splide-videos-thumbnails .splide__track--nav .splide__list > .splide__slide:not(.is-active) {
    opacity: 0.5;
  }
</style>
<script>
  import "./slider";
</script>
