---
import { readRecords } from "data-access/prisma";
import SectionTitle from "../SectionTitle.astro";
import Section from "../Section.astro";
import { ChevronRight } from "lucide-react";

import { Image } from "astro:assets";
import { cn } from "@/lib/utils";
import { LuExternalLink } from "react-icons/lu";
import SidePanel from "./SidePanel.astro";

const { data: records }: { data: any[] } = await readRecords({
  table: "media_video",
  where: {},
  take: 6,
  orderBy: { publishedAt: "desc" },
  success: "Videos found !",
});
---

{
  records.length === 0 ? null : (
    <Section>
      <SectionTitle position="right">Vidéos</SectionTitle>
      <div class="main-home-videos-container mx-auto">
        <div class="video-informations-container relative">
          <div class="absolute h-full w-full text-white">
            {records.map(
              ({
                id,
                title,
                channelId,
                channelTitle,
                thumbnailMaxResolution,
                description,
                playlistTitle,
                playlistId,
              }) => (
                <SidePanel
                  thumbnail={thumbnailMaxResolution}
                  channelTitle={channelTitle}
                  channelUrl={`https://www.youtube.com/channel/${channelId}`}
                  description={description}
                  title={title}
                  playlistTitle={playlistTitle}
                  playlistUrl={`https://www.youtube.com/playlist?list=${playlistId}`}
                  id={`panel-${id}`}
                />
              ),
            )}
          </div>
        </div>
        <div class="splide splide-videos bg-black shadow-[0_0_1rem_4px_rgba(0,0,0,0.5)]">
          {
            <div
              class={cn(
                "splide__arrows",
                "[&>button>svg]:h-[35px]! [&>button>svg]:w-[15px]! [&>button]:h-[40px]! [&>button]:w-[40px]!",
                "sm:[&>button>svg]:h-[45px]! sm:[&>button>svg]:w-[20px]! sm:[&>button]:h-[55px]! sm:[&>button]:w-[55px]!",
                "lg:[&>button>svg]:h-[70px]! lg:[&>button>svg]:w-[30px]! lg:[&>button]:h-[80px]! lg:[&>button]:w-[80px]!",
                records.length < 2 && "hidden",
              )}>
              <button class="splide__arrow splide__arrow--prev">
                <ChevronRight
                  color="#FFF200"
                  className="scale-125!"
                  size={60}
                />
              </button>
              <button class="splide__arrow splide__arrow--next">
                <ChevronRight
                  color="#FFF200"
                  className="scale-125!"
                  size={60}
                />
              </button>
            </div>
          }
          <div class="splide__track">
            <ul class="splide__list">
              {records.map((video) => (
                <li
                  class="splide__slide"
                  data-id={video.id}
                  data-splide-youtube={`https://www.youtube.com/watch?v=${video.id}`}>
                  <Image
                    src={video.thumbnailMaxResolution}
                    alt="Illustration vidéo"
                    width="1280"
                    height="720"
                  />
                  <a
                    href={`https://www.youtube.com/watch?v=${video.id}`}
                    target="_blank"
                    class={cn(
                      "max-md:hidden",
                      "absolute z-10 bottom-2 flex items-center gap-2  bg-black text-white font-montserrat px-3 rounded-lg font-semibold py-1 right-2",
                    )}>
                    <img
                      src="img/favicon_yt.png"
                      width="21"
                      alt=""
                    />
                    <span>Regarder sur Youtube</span>
                    <LuExternalLink size={14} />
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </div>
        <div class="splide splide-videos-thumbnails">
          <div class="splide__track">
            <ul class="splide__list gap-2">
              {records.map((video) => (
                <li
                  class="splide__slide rounded-lg"
                  data-id={video.id}
                  data-splide-youtube={`https://www.youtube.com/watch?v=${video.id}`}>
                  <Image
                    src={video.thumbnailMaxResolution}
                    alt="Illustration vidéo"
                    width="1280"
                    height="720"
                  />
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </Section>
  )
}
<style>
  /* GRID LAYOUT */
  .main-home-videos-container {
    display: grid;
    row-gap: 15px;
    column-gap: 0px;
    max-width: min(1600px, 90vw);
    grid-template-rows: auto;
    grid-template-columns: auto;
    grid-template-areas:
      "videos"
      "thumbnails";
  }

  @media (min-width: 1000px) {
    .main-home-videos-container {
      row-gap: 15px;
      column-gap: 15px;
      grid-template-columns: 1fr clamp(250px, 25%, 450px);
      grid-template-areas:
        "videos informations"
        "thumbnails .";
    }
  }

  .main-home-videos-container .splide-videos {
    grid-area: videos;
  }
  .main-home-videos-container .splide-videos-thumbnails {
    grid-area: thumbnails;
  }
  @media (min-width: 1000px) {
    .main-home-videos-container .video-informations-container {
      grid-area: informations;
    }
  }

  /* SPLIDE CUSTOMIZATION */

  .splide__track--nav {
    mask-image: linear-gradient(
      to right,
      transparent,
      black 10%,
      black 90%,
      transparent 100%
    );
    cursor: auto;
    will-change: auto;
  }

  /* PLAY ICON */
  .splide-videos :global(.splide__video__play) {
    height: clamp(50px, 7vw, 125px);
    width: clamp(50px, 7vw, 125px);
    opacity: 1;
    background: #fff200;
  }

  .splide-videos :global(.splide__video__play::after) {
    border-color: transparent transparent transparent black;
    border-width: 9px 0 9px 14px;
  }

  @media (min-width: 640px) {
    .splide-videos :global(.splide__video__play::after) {
      border-color: transparent transparent transparent black;
      border-width: 13px 0 13px 21px;
    }
  }
  @media (min-width: 1000px) {
    .splide-videos :global(.splide__video__play::after) {
      border-color: transparent transparent transparent black;
      border-width: 18px 0 18px 27px;
    }
  }

  /* ARROWS */
  .splide-videos .splide__arrow {
    background: #000;
    width: 3.5em;
    height: 3.5em;
    opacity: 0;
    transition: opacity 0.3s;
  }

  .splide-videos:hover .splide__arrow {
    opacity: 1;
  }

  .splide-videos.is-playing .splide__arrow {
    opacity: 0;
  }

  .splide-videos.is-playing:hover .splide__arrow {
    opacity: 0.2;
  }

  .splide-videos.is-playing .splide__arrow:hover {
    opacity: 1;
  }
  .splide-videos .splide__pagination__page {
    background: black;
    opacity: 1;
    transition: opacity 0.3s;
  }
  .splide-videos.is-playing .splide__pagination__page {
    opacity: 0;
  }

  .splide-videos.is-playing:hover .splide__pagination__page {
    opacity: 1;
  }

  .splide-videos .splide__pagination__page.is-active {
    background: #fff200;
  }

  .splide-videos-thumbnails .splide__track--nav .splide__list > .splide__slide {
    border: none !important;
    cursor: pointer;
    transition: opacity 0.3s;

    &:hover {
      opacity: 1 !important;
    }
  }

  .splide-videos-thumbnails
    .splide__track--nav
    .splide__list
    > .splide__slide:not(.is-active) {
    opacity: 0.5;
  }
</style>
<script>
  import Splide from "@splidejs/splide";
  import { Video } from "@splidejs/splide-extension-video";
  import "@splidejs/splide-extension-video/dist/css/splide-extension-video.min.css";

  const ADDITIONAL_INFORMATIONS_SELECTOR = ".video-informations";

  function manageDisplayOfAdditionalInformations(index: number = 0): void {
    const videoInformations = document.querySelectorAll(
      ADDITIONAL_INFORMATIONS_SELECTOR,
    ) as unknown as HTMLElement[];
    videoInformations.forEach((element, elementIndex) => {
      if (elementIndex === index) {
        element.style.display = "block";
      } else {
        element.style.display = "none";
      }
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const splideVideos = new Splide(".splide-videos", {
      heightRatio: 0.5625,
      width: "1200px",
      cover: true,
      speed: 1000,
      rewind: true,
      rewindSpeed: 1000,
      lazyLoad: "nearby",
      hideControls: false,
      pagination: false,
      video: {
        loop: true,
        playerOptions: {
          youtube: {
            controls: 1,
            color: "white",
          },
        },
      },
    });

    const splideVideosThumbnails = new Splide(".splide-videos-thumbnails", {
      rewind: true,
      width: "1200px",
      fixedWidth: "20%",
      heightRatio: 0.1,
      isNavigation: true,
      arrows: false,
      pagination: false,
      cover: true,
      lazyLoad: "nearby",
      dragMinThreshold: {
        mouse: 4,
        touch: 10,
      },
    });

    splideVideos.sync(splideVideosThumbnails);
    splideVideos.mount({ Video });
    splideVideosThumbnails.mount();

    manageDisplayOfAdditionalInformations();
    splideVideos.on("active", ({ index }) =>
      manageDisplayOfAdditionalInformations(index),
    );
  });
</script>
