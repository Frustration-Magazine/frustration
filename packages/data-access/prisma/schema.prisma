generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AUTH

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// MODELS

model payments {
  date      DateTime
  amount    Float
  source    PaymentSource
  type      PaymentType
  customers Int           @default(0)

  @@unique([date, source, type])
}

model Image {
  id          String  @id @default(cuid())
  url         String  @unique
  name        String?
  description String?

  events     events[]
  paperItems PaperItem[]
  authors    Author[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model events {
  id          Int      @id @default(autoincrement())
  date        DateTime
  description String
  city        String
  place       String
  contact     String?
  link        String?
  entrance    String?

  displayHour    Boolean @default(true)
  displayContact Boolean @default(true)
  displayEvent   Boolean @default(true)

  imageId String?
  image   Image?  @relation(fields: [imageId], references: [id])
}

model Author {
  id             String  @id @unique
  name           String
  email          String? @default("")
  xId            String? @default("")
  profilePicture String? @default("")

  paperItems PaperItem[]
  image      Image?      @relation(fields: [imageId], references: [id])
  imageId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaperItem {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  link        String?
  displayItem Boolean       @default(true)
  releaseDate DateTime
  type        PaperItemType

  author   Author  @relation(fields: [authorId], references: [id])
  authorId String
  image    Image?  @relation(fields: [imageId], references: [id])
  imageId  String?

  createdAt DateTime @default(now())
}

model media {
  id        String          @id
  type      MediaType
  source    MediaSource
  createdAt DateTime        @default(now())
  channel   media_channel?
  playlist  media_playlist?
  video     media_video[]
}

model media_video {
  id                     String   @id
  mediaId                String?
  title                  String
  description            String
  thumbnail              String
  thumbnailMaxResolution String?
  channelId              String?
  channelTitle           String?
  playlistTitle          String?
  playlistId             String?
  publishedAt            DateTime
  createdAt              DateTime @default(now())
  media                  media?   @relation(fields: [mediaId], references: [id])
}

model media_channel {
  id          String   @id
  mediaId     String?  @unique
  title       String
  description String
  thumbnail   String
  publishedAt DateTime
  createdAt   DateTime @default(now())
  media       media?   @relation(fields: [mediaId], references: [id])
}

model media_playlist {
  id           String   @id
  mediaId      String?  @unique
  title        String
  description  String
  channelId    String?
  channelTitle String?
  thumbnail    String
  publishedAt  DateTime
  createdAt    DateTime @default(now())
  media        media?   @relation(fields: [mediaId], references: [id])
}

// ENUMS

enum PaperItemType {
  magazine
  book
  other
}

enum PaymentSource {
  stripe
  helloasso
  tipeee
}

enum PaymentType {
  subscription_creation
  subscription_update
  donation
  subscription
  other
}

enum MediaSource {
  youtube
}

enum MediaType {
  channel
  video
  playlist
  playlistItem
}
